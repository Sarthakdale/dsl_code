#include <iostream>
#include <string>
using namespace std;

// Node structure for the linked list
struct Node {
    int PRN;           // Student PRN
    string name;       // Student Name
    Node* next;        // Pointer to the next node
};

// Class to represent the Pinnacle Club
class PinnacleClub {
private:
    Node* head;  // Pointer to the head (president)
    Node* tail;  // Pointer to the tail (secretary)

public:
    PinnacleClub() { head = tail = nullptr; }

    // Function to add a member (President, Secretary, or Regular Member)
    void addMember(int prn, string name, string position) {
        Node* newNode = new Node{prn, name, nullptr};
        if (position == "President") {
            newNode->next = head;
            head = newNode;
            if (tail == nullptr) tail = head; // If list is empty, tail also points to president
        } 
        else if (position == "Secretary") {
            if (tail) tail->next = newNode; // Link to current tail
            tail = newNode;                 // Update tail
            if (head == nullptr) head = tail; // If list is empty, head also points to secretary
        } 
        else {
            if (tail) {  // Add as a regular member after the secretary
                newNode->next = tail->next;
                tail->next = newNode;
            }
        }
        cout << position << " added successfully!\n";
    }

    // Function to delete a member (President, Secretary, or Regular Member)
    void deleteMember(string position) {
        if (!head) {
            cout << "The list is empty! Nothing to delete.\n";
            return;
        }
        if (position == "President") {
            Node* temp = head;
            head = head->next;
            delete temp;
            cout << "President deleted successfully!\n";
        } 
        else if (position == "Secretary") {
            Node* temp = head;
            while (temp && temp->next != tail) temp = temp->next;
            delete tail;
            tail = temp;
            if (tail) tail->next = nullptr;
            cout << "Secretary deleted successfully!\n";
        } 
        else {
            int prn;
            cout << "Enter PRN of the member to delete: ";
            cin >> prn;
            Node *temp = head, *prev = nullptr;
            while (temp && temp->PRN != prn) {
                prev = temp;
                temp = temp->next;
            }
            if (!temp) {
                cout << "Member with PRN " << prn << " not found!\n";
                return;
            }
            prev->next = temp->next;
            delete temp;
            cout << "Member deleted successfully!\n";
        }
    }

    // Function to compute the total number of members
    int countMembers() {
        int count = 0;
        Node* temp = head;
        while (temp) {
            count++;
            temp = temp->next;
        }
        return count;
    }

    // Function to display all members
    void displayMembers() {
        Node* temp = head;
        if (!temp) {
            cout << "The list is empty!\n";
            return;
        }
        cout << "Club Members:\n";
        while (temp) {
            cout << "PRN: " << temp->PRN << ", Name: " << temp->name << "\n";
            temp = temp->next;
        }
    }

    // Function to concatenate two linked lists
    void concatenate(PinnacleClub& other) {
        if (!head) {
            head = other.head;
            tail = other.tail;
        } 
        else if (other.head) {
            tail->next = other.head;
            tail = other.tail;
        }
        cout << "Lists concatenated successfully!\n";
    }
};

// Main function
int main() {
    PinnacleClub divA, divB;
    int choice, prn;
    string name, position;

    do {
        cout << "\n*** Pinnacle Club Menu ***\n";
        cout << "1. Add Member\n2. Delete Member\n3. Count Members\n4. Display Members\n";
        cout << "5. Concatenate Lists\n6. Exit\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter PRN: ";
                cin >> prn;
                cout << "Enter Name: ";
                cin.ignore();
                getline(cin, name);
                cout << "Enter Position (President/Secretary/Member): ";
                cin >> position;
                divA.addMember(prn, name, position);
                break;

            case 2:
                cout << "Enter Position to delete (President/Secretary/Member): ";
                cin >> position;
                divA.deleteMember(position);
                break;

            case 3:
                cout << "Total Members: " << divA.countMembers() << "\n";
                break;

            case 4:
                divA.displayMembers();
                break;

            case 5:
                cout << "Concatenating two divisions...\n";
                cout << "Enter PRNs and Names for Division B (Enter -1 to stop):\n";
                while (true) {
                    cout << "Enter PRN: ";
                    cin >> prn;
                    if (prn == -1) break;
                    cout << "Enter Name: ";
                    cin.ignore();
                    getline(cin, name);
                    divB.addMember(prn, name, "Member");
                }
                divA.concatenate(divB);
                break;

            case 6:
                cout << "Exiting Program...\n";
                break;

            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}
