#include <iostream>
#include <stack>
#include <cctype>  // For isdigit
using namespace std;

// Function to determine precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') {
        return 1;
    } else if (op == '*' || op == '/') {
        return 2;
    }
    return 0;
}

// Function to perform arithmetic operations
int applyOperator(int a, int b, char op) {
    if (op == '+') return a + b;
    if (op == '-') return a - b;
    if (op == '*') return a * b;
    if (op == '/') return a / b;
    return 0;
}

// Function to convert infix expression to postfix
string infixToPostfix(const string& infix) {
    stack<char> operators;
    string postfix = "";

    for (char c : infix) {
        if (isdigit(c)) {
            postfix += c;  // Add operand to postfix
        }
        else if (c == '(') {
            operators.push(c);  // Push '(' onto the stack
        }
        else if (c == ')') {
            // Pop and append operators until '(' is found
            while (!operators.empty() && operators.top() != '(') {
                postfix += operators.top();
                operators.pop();
            }
            operators.pop(); // Pop '('
        }
        else if (c == '+' || c == '-' || c == '*' || c == '/') {
            // Pop operators with higher or equal precedence
            while (!operators.empty() && precedence(operators.top()) >= precedence(c)) {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(c);  // Push the current operator
        }
    }

    // Pop remaining operators in the stack
    while (!operators.empty()) {
        postfix += operators.top();
        operators.pop();
    }

    return postfix;
}

// Function to evaluate a postfix expression
int evaluatePostfix(const string& postfix) {
    stack<int> values;

    for (char c : postfix) {
        if (isdigit(c)) {
            values.push(c - '0');  // Push operand to stack
        } else {
            int b = values.top(); values.pop();
            int a = values.top(); values.pop();
            int result = applyOperator(a, b, c);  // Apply the operator
            values.push(result);  // Push the result back to the stack
        }
    }

    return values.top();  // Final result is on top of the stack
}

int main() {
    string infix, postfix;

    cout << "Enter infix expression: ";
    cin >> infix;

    // Convert infix to postfix
    postfix = infixToPostfix(infix);
    cout << "Postfix expression: " << postfix << endl;

    // Evaluate the postfix expression
    int result = evaluatePostfix(postfix);
    cout << "Evaluation result: " << result << endl;

    return 0;
}
