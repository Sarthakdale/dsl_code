#include <iostream>
using namespace std;

class Deque {
private:
    int arr[10]; // Fixed size array for deque, size is 10
    int front, rear;

public:
    // Constructor to initialize front and rear
    Deque() {
        front = -1;
        rear = -1;
    }

    // Function to check if deque is full
    bool isFull() {
        return (front == 0 && rear == 9) || (rear == (front - 1) % 10);
    }

    // Function to check if deque is empty
    bool isEmpty() {
        return front == -1;
    }

    // Function to insert at the front of the deque
    void insertFront(int value) {
        if (isFull()) {
            cout << "Deque is full!" << endl;
            return;
        }
        if (front == -1) { // If deque is empty
            front = rear = 0;
        } else if (front == 0) { // Wrap around
            front = 9;
        } else {
            front--;
        }
        arr[front] = value;
        cout << "Inserted " << value << " at front." << endl;
    }

    // Function to insert at the rear of the deque
    void insertRear(int value) {
        if (isFull()) {
            cout << "Deque is full!" << endl;
            return;
        }
        if (front == -1) { // If deque is empty
            front = rear = 0;
        } else if (rear == 9) { // Wrap around
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = value;
        cout << "Inserted " << value << " at rear." << endl;
    }

    // Function to delete from the front of the deque
    void deleteFront() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return;
        }
        cout << "Deleted " << arr[front] << " from front." << endl;
        if (front == rear) { // Only one element left
            front = rear = -1;
        } else if (front == 9) {
            front = 0;
        } else {
            front++;
        }
    }

    // Function to delete from the rear of the deque
    void deleteRear() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return;
        }
        cout << "Deleted " << arr[rear] << " from rear." << endl;
        if (front == rear) { // Only one element left
            front = rear = -1;
        } else if (rear == 0) {
            rear = 9;
        } else {
            rear--;
        }
    }

    // Function to display the elements in the deque
    void display() {
        if (isEmpty()) {
            cout << "Deque is empty!" << endl;
            return;
        }
        cout << "Deque elements: ";
        if (front <= rear) {
            for (int i = front; i <= rear; i++) {
                cout << arr[i] << " ";
            }
        } else {
            for (int i = front; i < 10; i++) {
                cout << arr[i] << " ";
            }
            for (int i = 0; i <= rear; i++) {
                cout << arr[i] << " ";
            }
        }
        cout << endl;
    }
};

int main() {
    Deque dq;
    int choice, value;

    while (true) {
        cout << "\nDeque Menu" << endl;
        cout << "1. Insert at front" << endl;
        cout << "2. Insert at rear" << endl;
        cout << "3. Delete from front" << endl;
        cout << "4. Delete from rear" << endl;
        cout << "5. Display deque" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert at front: ";
                cin >> value;
                dq.insertFront(value);
                break;
            case 2:
                cout << "Enter value to insert at rear: ";
                cin >> value;
                dq.insertRear(value);
                break;
            case 3:
                dq.deleteFront();
                break;
            case 4:
                dq.deleteRear();
                break;
            case 5:
                dq.display();
                break;
            case 6:
                cout << "Exiting the program." << endl;
                return 0;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    }

    return 0;
}
